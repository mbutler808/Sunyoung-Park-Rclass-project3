data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
Raw data <- read.csv("plant_measurement_raw.csv", header = TRUE, fill = TRUE)
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv("plant_measurement_raw.csv", header = TRUE, fill = TRUE)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(plant_measurement_raw.csv, header = TRUE, fill = TRUE)
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
getwd()
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
print(dictionary)
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")
#check skimr or #
unique(rawdata$species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata
unique(rawdata$Species)
ii <- grep("(unplanted weed)", d1$Species)#
d1$species[ii] <- "Unplanted weed"
ii <- grep("(unplanted weed)", d1$Species)#
d1$Species[ii] <- "Unplanted weed"
unique(rawdata$Species)
i <- grep("(unplanted)", d1$Species)#
d1$Species[ii] <- "Unplanted weed"
unique(rawdata$Species)
d1$Species <- sub("unplanted", "Unplanted", d1$Species)
unique(rawdata$Species)
d1$Species <- sub("u", "U", d1$Species)
unique(rawdata$Species)
d1 <- rawdata
> unique(rawdata$Species)
unique(rawdata$Species)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
skimr::skim(rawdata)
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
skimr::skim(rawdata)
head(d1)
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)
skimr::skim(rawdata)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
head(d1)
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]
head(d1)
d1[d1=="missing"] <- NA#
d1[d1=="n/a"] <- NA
head(d1)
d1[d1==""] <- NA
head(d1)
num <- c(9:29)#
num <- as.numeric(num)
skimr::skim(rawdata)
head(d1)
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
head(d1)
skimr::skim(rawdata)
num <- c(d1$9:29)
num <- d1$9:29
d1 <- d1 %>% #
     mutate_at(c(9:29), as.numeric)
head(d1)
skimr::skim(rawdata)
d1[, 9:29] <- lapply(d1[, 9:29], as.numeric)
skimr::skim(rawdata)
cl <- c(9:29)#
#
cl <- as.numeric(cl)
cl
head(d1)
skimr::skim(rawdata)
cl <- d1$Height#
#
cl <- as.numeric(cl)
skimr::skim(rawdata)
c(9:29)
head(c(9:29))
skimr::skim(d1)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
num <- c(9:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
skimr::skim(d1)
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)
head(d1)
d1$Species <- as.character(d1$Species)
head(d1)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
skimr::skim(d1)
head(d1)
summary(rawdata)
dplyr::glimpse(d1)
summary(d1)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
library(ggplot2)#
#
ggplot(plant, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Species, y=Biomass)) +#
  geom_boxplot()
head(spec)
summary(spec)
dplyr::glimpse(spec)
skimr::skim(spec)
summary(spec)
summary(rawdata)
{#
  print(shapiro.test(spec[[i]]$Biomass))#
}
for (i in 1:length(spec)) {#
  print(shapiro.test(spec[[i]]$Biomass))#
}#
print(shapiro.test(plant$Biomass))
summary(spec)
print(shapiro.test(d1$Biomass))
##############################
#
# scatter plot to visualize#
# play around with this if you have time! #
#
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
##############################
#
# scatter plot to visualize#
# play around with this if you have time! #
#
library(ggplot2)#
#
ggplot(plant, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Species, y=Biomass)) +#
  geom_boxplot()
summary(spec)
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Festuca Mairei"]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Festuca Mairei"]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
spec
summary(d1)
tail(d1)
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec
spec <- with(d2, split(d2, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d2 <- d1[-c(Rows),]#
d2#
#
spec <- with(d2, split(d2, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
spec
m1 <- lm(Biomass ~ Length_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
m1 <- lm(Biomass ~ Leaves_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
m1 <- lm(Biomass ~ Branch_length,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
spec
m1 <- lm(Biomass ~ Width_perpendicular,#
data= spec[["Artemisia californica"]])#
summary(m1)
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
#We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
#Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
#We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")
unique(rawdata$Species)
unique(d1$Species)
d1 <- rawdata
unique(d1$Species)
d1 <- d1[,3:32]
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
column(d1)
d1
skimr::skim(d1)
d1$Species <- as.character(d1$Species)
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
spec
class(d1)
class(spec)
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
spec
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save spec as the clean data for data analysis.#
#
processeddata <- spec      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)#
##############################
#
# test for normality#
# a normal distribution is an assumption for a lot of statistical tests#
# this part of the code tests for normality using a Shapiro Test#
# the loop tests for normality in each species in the same order the dataframes are listed in spec#
### the below is how you test for normality by species one at a time#
#
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))#
##normally distributed data (p > 0.05): Aptenia cordifolia, Artemisia californica, Chondropetalum tectorum, #Gnaphaluim spp., Rhus integrifolia, Solidago spp., Unidentified shrub#
##not normally distributed data (p < 0.05): Baccharis pilularis, Euphorbia spp., Lactucca spp., Onetheria #biennis, Salix spp., Unplanted weed#
#Look at each species and its morphological measurements to see which measurement(s) would be a good biomass indicator for each species. Then we can test with a regular linear regression model for normally distributed data. #
#
spec#
#
##Aptenia cordifolia: test for leaves per branch measurements#
#
m1 <- lm(Biomass ~ Leaves_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
### R-squared value is 0.3025 and p-value is 0.07236, which means that the model doesn't explain the variation of the data and it is also not significant.#
#
##Aptenia cordifolia: test for branch length measurements#
#
m1 <- lm(Biomass ~ Branch_length,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
### R-squared value is 0.7172 and p-value is 0.002438, which means that the model relatively explains the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Aptenia cordifolia.#
##Artemisia californica: test for width perpendicular measurements#
m1 <- lm(Biomass ~ Width_perpendicular,#
data= spec[["Artemisia californica"]])#
summary(m1)#
### R-squared value is 0.9425 and p-value is 0.0008057, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Artemisia californica.#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
> write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
write.csv(processeddata, file = save_data_location_csv)
capture.output(processeddata, file = "save_data_location_csv")
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"
capture.output(processeddata, file = "save_data_location_csv")
load("/Users/sunyoungpark/Documents/git/Sunyoung-Park-Rclass-project3/Data/Processed_data/processeddata.rds")
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
getwd()
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
require(ggplot2) #for plotting#
# path to data and results #
data_path <- "../../Data/Processed_data/"#
#
results_path <- "../../Results/"#
## ---- functions ----#
# function to paste path to output filenames#
#
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}#
#
## ---- loaddata ----#
# load data#
dat <- readRDS( addpath("processeddata.rds", data_path) )
spec
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
spec
print(shapiro.test(spec[[Species]]$Biomass))
print(shapiro.test(spec[["Species"]]$Biomass))
hist(spec[["Aptenia cordifolia"]]$Biomass, col='steelblue')
hist(spec[["Artemisia californica"]]$Biomass), col='steelblue')
hist(spec[["Artemisia californica"]]$Biomass, col='steelblue')
hist(spec[["Baccharis pilularis"]]$Biomass, col='steelblue')
print(shapiro.test(d1$Biomass))
x <- rnorm(d1$Biomass)#
qqnorm(x); qqline(x)
for (i in 1:length(spec)) {#
  print(shapiro.test(spec[[i]]$Biomass))#
}
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
---#
title: "An example cleaning script with code pulled in from R script"#
author: "Sunyoung Park"#
date: "2023-04-21"#
output: html_document#
---#
#
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
