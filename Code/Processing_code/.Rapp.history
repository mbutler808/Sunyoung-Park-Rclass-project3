data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
Raw data <- read.csv("plant_measurement_raw.csv", header = TRUE, fill = TRUE)
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv("plant_measurement_raw.csv", header = TRUE, fill = TRUE)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(plant_measurement_raw.csv, header = TRUE, fill = TRUE)
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)
getwd()
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Sunyoung-Park-Rclass-project3/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
print(dictionary)
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")
#check skimr or #
unique(rawdata$species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata
unique(rawdata$Species)
ii <- grep("(unplanted weed)", d1$Species)#
d1$species[ii] <- "Unplanted weed"
ii <- grep("(unplanted weed)", d1$Species)#
d1$Species[ii] <- "Unplanted weed"
unique(rawdata$Species)
i <- grep("(unplanted)", d1$Species)#
d1$Species[ii] <- "Unplanted weed"
unique(rawdata$Species)
d1$Species <- sub("unplanted", "Unplanted", d1$Species)
unique(rawdata$Species)
d1$Species <- sub("u", "U", d1$Species)
unique(rawdata$Species)
d1 <- rawdata
> unique(rawdata$Species)
unique(rawdata$Species)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
skimr::skim(rawdata)
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
skimr::skim(rawdata)
head(d1)
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)
skimr::skim(rawdata)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
head(d1)
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]
head(d1)
d1[d1=="missing"] <- NA#
d1[d1=="n/a"] <- NA
head(d1)
d1[d1==""] <- NA
head(d1)
num <- c(9:29)#
num <- as.numeric(num)
skimr::skim(rawdata)
head(d1)
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
head(d1)
skimr::skim(rawdata)
num <- c(d1$9:29)
num <- d1$9:29
d1 <- d1 %>% #
     mutate_at(c(9:29), as.numeric)
head(d1)
skimr::skim(rawdata)
d1[, 9:29] <- lapply(d1[, 9:29], as.numeric)
skimr::skim(rawdata)
cl <- c(9:29)#
#
cl <- as.numeric(cl)
cl
head(d1)
skimr::skim(rawdata)
cl <- d1$Height#
#
cl <- as.numeric(cl)
skimr::skim(rawdata)
c(9:29)
head(c(9:29))
skimr::skim(d1)
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
num <- c(9:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
skimr::skim(d1)
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)
head(d1)
d1$Species <- as.character(d1$Species)
head(d1)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
skimr::skim(d1)
head(d1)
summary(rawdata)
dplyr::glimpse(d1)
summary(d1)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
library(ggplot2)#
#
ggplot(plant, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Species, y=Biomass)) +#
  geom_boxplot()
head(spec)
summary(spec)
dplyr::glimpse(spec)
skimr::skim(spec)
summary(spec)
summary(rawdata)
{#
  print(shapiro.test(spec[[i]]$Biomass))#
}
for (i in 1:length(spec)) {#
  print(shapiro.test(spec[[i]]$Biomass))#
}#
print(shapiro.test(plant$Biomass))
summary(spec)
print(shapiro.test(d1$Biomass))
##############################
#
# scatter plot to visualize#
# play around with this if you have time! #
#
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
##############################
#
# scatter plot to visualize#
# play around with this if you have time! #
#
library(ggplot2)#
#
ggplot(plant, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
library(ggplot2)#
#
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Height, y=Biomass, color=Species), na.rm=TRUE) +#
  geom_point(na.rm=TRUE)
ggplot(d1, aes(x=Species, y=Biomass)) +#
  geom_boxplot()
summary(spec)
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Festuca Mairei"]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Festuca Mairei"]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
spec
summary(d1)
tail(d1)
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec
spec <- with(d2, split(d2, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d2 <- d1[-c(Rows),]#
d2#
#
spec <- with(d2, split(d2, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1.1 --------#
#
#check skimr or #
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
## ---- cleandata1.3 -------- #
#
unique(d1$Species)#
###gets rid of date and time#
### we don't need it for our analysis#
d1 <- d1[,3:32]#
# turns any blanks or n/a's into NA in the program#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
### separate by species#
#
###turns species into a categorical variable#
d1$Species <- as.character(d1$Species)#
### splits the plant dataframe into#
### a list of dataframes (aka spec) by species #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
spec
m1 <- lm(Biomass ~ Length_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
m1 <- lm(Biomass ~ Leaves_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
m1 <- lm(Biomass ~ Branch_length,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)
spec
m1 <- lm(Biomass ~ Width_perpendicular,#
data= spec[["Artemisia californica"]])#
summary(m1)
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
#We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
#Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
#We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")
unique(rawdata$Species)
unique(d1$Species)
d1 <- rawdata
unique(d1$Species)
d1 <- d1[,3:32]
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))
column(d1)
d1
skimr::skim(d1)
d1$Species <- as.character(d1$Species)
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
spec
class(d1)
class(spec)
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])
spec
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save spec as the clean data for data analysis.#
#
processeddata <- spec      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)#
##############################
#
# test for normality#
# a normal distribution is an assumption for a lot of statistical tests#
# this part of the code tests for normality using a Shapiro Test#
# the loop tests for normality in each species in the same order the dataframes are listed in spec#
### the below is how you test for normality by species one at a time#
#
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))#
##normally distributed data (p > 0.05): Aptenia cordifolia, Artemisia californica, Chondropetalum tectorum, #Gnaphaluim spp., Rhus integrifolia, Solidago spp., Unidentified shrub#
##not normally distributed data (p < 0.05): Baccharis pilularis, Euphorbia spp., Lactucca spp., Onetheria #biennis, Salix spp., Unplanted weed#
#Look at each species and its morphological measurements to see which measurement(s) would be a good biomass indicator for each species. Then we can test with a regular linear regression model for normally distributed data. #
#
spec#
#
##Aptenia cordifolia: test for leaves per branch measurements#
#
m1 <- lm(Biomass ~ Leaves_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
### R-squared value is 0.3025 and p-value is 0.07236, which means that the model doesn't explain the variation of the data and it is also not significant.#
#
##Aptenia cordifolia: test for branch length measurements#
#
m1 <- lm(Biomass ~ Branch_length,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
### R-squared value is 0.7172 and p-value is 0.002438, which means that the model relatively explains the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Aptenia cordifolia.#
##Artemisia californica: test for width perpendicular measurements#
m1 <- lm(Biomass ~ Width_perpendicular,#
data= spec[["Artemisia californica"]])#
summary(m1)#
### R-squared value is 0.9425 and p-value is 0.0008057, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Artemisia californica.#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
m1 <- lm(Biomass ~ Width_perpendicular + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
> write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
write.csv(processeddata, file = save_data_location_csv)
capture.output(processeddata, file = "save_data_location_csv")
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"
capture.output(processeddata, file = "save_data_location_csv")
load("/Users/sunyoungpark/Documents/git/Sunyoung-Park-Rclass-project3/Data/Processed_data/processeddata.rds")
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
getwd()
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
require(ggplot2) #for plotting#
# path to data and results #
data_path <- "../../Data/Processed_data/"#
#
results_path <- "../../Results/"#
## ---- functions ----#
# function to paste path to output filenames#
#
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}#
#
## ---- loaddata ----#
# load data#
dat <- readRDS( addpath("processeddata.rds", data_path) )
spec
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
spec
print(shapiro.test(spec[[Species]]$Biomass))
print(shapiro.test(spec[["Species"]]$Biomass))
hist(spec[["Aptenia cordifolia"]]$Biomass, col='steelblue')
hist(spec[["Artemisia californica"]]$Biomass), col='steelblue')
hist(spec[["Artemisia californica"]]$Biomass, col='steelblue')
hist(spec[["Baccharis pilularis"]]$Biomass, col='steelblue')
print(shapiro.test(d1$Biomass))
x <- rnorm(d1$Biomass)#
qqnorm(x); qqline(x)
for (i in 1:length(spec)) {#
  print(shapiro.test(spec[[i]]$Biomass))#
}
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphaluim spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))
---#
title: "An example cleaning script with code pulled in from R script"#
author: "Sunyoung Park"#
date: "2023-04-21"#
output: html_document#
---#
#
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Turn any blanks or n/a's into NA#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
#coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
---#
title: "Cleaning R script for identifying best predictors of biomass for 13 plant species"#
author: "Sunyoung Park"#
date: "2023-04-21"#
output: textedit_document#
---#
#
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need it for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
title: ""Cleaning R script for identifying best predictors of biomass for 13 plant species""#
author: "Sunyoung Park"#
date: "04/22/2023"#
output: textedit_document#
---#
This TextEdit file loads the cleaned data and does some initial analysis. #
# Analysis #
#
# In this analysis script, I am analyzing direct measurements of 11 different morphological characteristics and aboveground biomass to identify the best non-destructive indicators for the aboveground biomass of each of the 13 plant species.  #
#
# I am using regression analysis to perform my analysis. #
################################
# Morph measurement and biomass correlation analysis script#
##
# This script loads the processed, cleaned data, #
# does a simple analysis and saves the results#
# to the results folder#
################################
#
## ---- setup -----#
# load needed packages. make sure they are installed#
require(ggplot2) #for plotting#
require(lattice) # for plotting#
require(magrittr) #for piping#
require(knitr) #for formatting output#
# path to data and results #
data_path <- "../../Data/Processed_data/"#
#
results_path <- "../../Results/"#
## ---- functions ----#
# function to paste path to output filenames#
#
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}#
#
## ---- loaddata ----#
# load data#
dat <- readRDS( addpath("processeddata.rds", data_path) )#
## ---- header ----#
#######################################
# Data fitting/statistical analysis#
#######################################
## ---- testfornormality ----#
#
# This part of the code tests for normality using a Shapiro-Wilk test.#
# The loop tests for normality in each species in the same order the dataframes are listed in spec.#
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(dat, split(dat, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
# The below is how you test for normality by species for the 13 species we are going to study. #
for (i in 1:length(spec)) {#
  print(shapiro.test(spec[[i]]$Biomass))#
}#
#
### not sure if there's a way to make this a table?#
# Or this, to test for normality for each species individually one at a time. #
#
print(shapiro.test(spec[["Aptenia cordifolia"]]$Biomass))#
print(shapiro.test(spec[["Artemisia californica"]]$Biomass))#
print(shapiro.test(spec[["Baccharis pilularis"]]$Biomass))#
print(shapiro.test(spec[["Chondropetalum tectorum"]]$Biomass))#
print(shapiro.test(spec[["Euphorbia spp."]]$Biomass))#
print(shapiro.test(spec[["Gnaphalium spp."]]$Biomass))#
print(shapiro.test(spec[["Lactucca spp."]]$Biomass))#
print(shapiro.test(spec[["Onetheria biennis"]]$Biomass))#
print(shapiro.test(spec[["Rhus integrifolia"]]$Biomass))#
print(shapiro.test(spec[["Salix spp."]]$Biomass))#
print(shapiro.test(spec[["Solidago spp."]]$Biomass))#
print(shapiro.test(spec[["Unidentified shrub"]]$Biomass))#
print(shapiro.test(spec[["Unplanted weed"]]$Biomass))#
# From the test, we observe: #
# Normally distributed data (p-value > 0.05): Aptenia cordifolia, Artemisia californica, Chondropetalum tectorum, Gnaphaluim spp., Rhus integrifolia, Solidago spp., Unidentified shrub#
# Not normally distributed data (p-value < 0.05): Baccharis pilularis, Euphorbia spp., Lactucca spp., Onetheria biennis, Salix spp., Unplanted weed#
## ---- linear_regression_model_A.cordifolia ----#
#
# Look at each species and its morphological measurements to see which measurement(s) would be a good biomass indicator for each species. Then we can test with a regular linear regression model for normally distributed data. #
#
spec#
#
#Aptenia cordifolia: test for leaves per branch measurements#
#
m1 <- lm(Biomass ~ Leaves_per_branch,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
# R-squared value is 0.3025 and p-value is 0.07236, which means that the model doesn't explain the variation of the data and it is also not significant.#
#Aptenia cordifolia: test for branch length measurements#
#
m1 <- lm(Biomass ~ Branch_length,#
data= spec [["Aptenia cordifolia"]])#
summary(m1)#
#
# R-squared value is 0.7172 and p-value is 0.002438, which means that the model relatively explains the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Aptenia cordifolia.#
#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Aptenia cordifolia"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) +      geom_point() +#
  stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
  xlab("Branch Length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Aptenia cordifolia"))))#
# plot to .png file#
#
a.cordifolia <- ggplot(data=subset(dat,Species=="Aptenia cordifolia"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branch Length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Aptenia cordifolia"))))#
#
ggsave(filename = addpath("A.cordifolia_branchlength.png", results_path), a.cordifolia)#
## ---- linear_regression_model_A.californica ----#
#
#Artemisia californica: test for width farthest measurements#
#
m1 <- lm(Biomass ~ Width_farthest,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
# R-squared value is 0.9594 and p-value is 0.0003998, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Artemisia californica since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Artemisia californica"), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Artemisia californica"))))#
# plot to .png file#
#
a.californica <- #
ggplot(data=subset(dat,Species=="Artemisia californica"), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Artemisia californica"))))#
ggsave(filename = addpath("a.californica_width.png", results_path), a.californica)#
## Artemisia californica: now we test if using multiple morphological characteristics as biomass indicators will increase the R-squared value.  #
m1 <- lm(Biomass ~ Width_perpendicular + Width_farthest + Branches_per_stem,#
data= spec[["Artemisia californica"]])#
summary(m1)#
#
# R-squared value is 0.9733 and p-value is 0.01599, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. These three morphological characteristics can be used together as better biomass indicators for Artemisia californica than one individual characteristic, since it has a higher R-squared value.#
## ---- linear_regression_model_C.tectorum ----#
#
#Chondropetalum tectorum : test for stem density measurements#
#
m1 <- lm(Biomass ~ Stem_density,#
data= spec[["Chondropetalum tectorum"]])#
summary(m1)#
#
# R-squared value is 0.9177 and p-value is 0.001661, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Chondropetalum tectorum since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Chondropetalum tectorum"), aes(x=Stem_density, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Stem Density (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Stem Density vs. Biomass for", substitute(paste(italic("Chondropetalum tectorum"))))#
# plot to .png file#
#
c.tectorum <- #
ggplot(data=subset(dat,Species=="Chondropetalum tectorum"), aes(x=Stem_density, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Stem Density (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Stem Density vs. Biomass for", substitute(paste(italic("Chondropetalum tectorum"))))#
ggsave(filename = addpath("c.tectorum_density.png", results_path), c.tectorum)#
## ---- linear_regression_model_Gnaphalium.spp. ----#
#
#Gnaphalium spp. : test for branch per stem measurements#
#
m1 <- lm(Biomass ~ Branches_per_stem,#
data= spec[["Gnaphalium spp."]])#
summary(m1)#
#
# R-squared value is 0.8425 and p-value is 0.01788, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Gnaphalium spp. since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Gnaphaluim spp."), aes(x=Branches_per_stem, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branches per stem (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branches per stem vs. Biomass for", substitute(paste(italic("Gnaphalium spp."))))#
# plot to .png file#
#
Gnaphalium <-  ggplot(data=subset(dat,Species=="Gnaphalium spp."), aes(x=Branches_per_stem, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branches per stem (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branches per stem vs. Biomass for", substitute(paste(italic("Gnaphalium spp."))))#
#
ggsave(filename = addpath("Gnaphalium_branchperstem.png", results_path), Gnaphalium)#
## ---- linear_regression_model_R.integrifolia ----#
#
#R.integrifolia : test for branch length measurements#
#
m1 <- lm(Biomass ~ Branch_length,#
data= spec[["Rhus integrifolia"]])#
summary(m1)#
#
# R-squared value is 0.955 and p-value is 0.002662, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Rhus integrifolia since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Rhus integrifolia"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branch Length(n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Rhus integrifolia"))))#
# plot to .png file#
#
R.integrifolia <-  ggplot(data=subset(dat,Species=="Rhus integrifolia"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branch Length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Rhus integrifolia"))))#
ggsave(filename = addpath("R.integrifolia_branchlength.png", results_path), R.integrifolia)#
## ---- linear_regression_model_solidago ----#
#
# Solidago spp. : test for average leaf length measurements#
#
m1 <- lm(Biomass ~ Leaf_lavg,#
data= spec[["Solidago spp."]])#
summary(m1)#
#
# R-squared value is 0.9923 and p-value is 1.431e-05, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Solidago spp. since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Solidago spp."), aes(x=Leaf_lavg, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Average leaf length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Average leaf length vs. Biomass for", substitute(paste(italic("Solidago spp."))))#
# plot to .png file#
#
solidago <-  ggplot(data=subset(dat,Species=="Solidago spp."), aes(x=Leaf_lavg, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Average leaf length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Average leaf length vs. Biomass for", substitute(paste(italic("Solidago spp."))))#
ggsave(filename = addpath("solidago_avgleaflength.png", results_path), solidago)#
## ---- linear_regression_model_unidentifiedshrub ----#
#
# Unidentified shrub  : test for branch length measurements#
#
m1 <- lm(Biomass ~ Branch_length,#
data= spec[["Unidentified shrub"]])#
summary(m1)#
#
# R-squared value is 0.9454 and p-value is 0.0007269, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Unidentified shrub since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Unidentified shrub"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branch Length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Unidentified shrub"))))#
# plot to .png file#
#
unidentifiedshrub <-  ggplot(data=subset(dat,Species=="Unidentified shrub"), aes(x=Branch_length, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Branch Length (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Branch Length vs. Biomass for", substitute(paste(italic("Unidentified shrub"))))#
ggsave(filename = addpath("unidentifiedshrub_branchlength.png", results_path), unidentifiedshrub)#
# For non-normally distributed data (where the response variable, biomass, is not normally distributed), we use a generalized linear model (glm). #
# We can also use a log transformation to transform the data to a more normally distributed dataset.#
# For our analysis, we will use a log transformation before. #
## ---- linear_regression_model_B.pilularis ----#
spec[["Baccharis pilularis"]]$log <- log(spec[["Baccharis pilularis"]]$Biomass)#
#
print(shapiro.test(spec[["Baccharis pilularis"]]$log))#
#
y <- rnorm(spec[["Baccharis pilularis"]]$log)#
qqnorm(y); qqline(y)#
# Baccharis pilularis: test for width measurements #
#
m1 <- lm(log ~ Width_farthest,#
       data = spec[["Baccharis pilularis"]])#
summary(m1)#
# R-squared value is 0.8904 and p-value is 0.0008862, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Baccharis pilularis since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Baccharis pilularis"), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Baccharis pilularis"))))#
# plot to .png file#
#
b.pilularis <-  ggplot(data=subset(dat,Species=="Baccharis pilularis"), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Baccharis pilularis"))))#
ggsave(filename = addpath("b.pilularis_width.png", results_path), b.pilularis)#
## ---- linear_regression_model_Euphorbia ----#
# Euphorbia spp.: test for width measurements #
#
m1 <- lm(Biomass ~ Width_farthest,#
       data = spec[["Euphorbia spp."]])#
summary(m1)#
# R-squared value is 0.8814 and p-value is 0.0001094, which means that the model does explain the variation of the data (fits the regression model). Even though the dataset was not normally distributed, the R-squared value is greater without a log transformation.  #
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Euphorbia spp."), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Euphorbia spp."))))#
# plot to .png file#
#
euphorbia <-  ggplot(data=subset(dat,Species=="Euphorbia spp."), aes(x=Width_farthest, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Width (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Width vs. Biomass for", substitute(paste(italic("Euphorbia spp."))))#
ggsave(filename = addpath("euphorbia_width.png", results_path), euphorbia)#
## ---- linear_regression_model_Lactucca ----#
# Lactucca spp.: test for width measurements #
#
m1 <- lm(Biomass ~ Total_leaves,#
       data = spec[["Lactucca spp."]])#
summary(m1)#
#
# R-squared value is 0.9937 and p-value is 0.0001378, which means that the model does explain the variation of the data (fits the regression model). Even though the dataset was not normally distributed, the R-squared value is greater without a log transformation.  #
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Lactucca spp."), aes(x=Total_leaves, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Total Leaves (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Total Leaves vs. Biomass for", substitute(paste(italic("Lactucca spp."))))#
# plot to .png file#
#
Lactucca <-  ggplot(data=subset(dat,Species=="Lactucca spp."), aes(x=Total_leaves, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Total Leaves (n)") + #
  ylab("Biomass (g)") +#
  ggtitle("Total Leaves vs. Biomass for", substitute(paste(italic("Lactucca spp."))))#
ggsave(filename = addpath("lactucca_totalleaves.png", results_path), lactucca)#
## ---- linear_regression_model_O.biennis ----#
spec[["Onetheria biennis"]]$log <- log(spec[["Onetheria biennis"]]$Biomass)#
#
print(shapiro.test(spec[["Onetheria biennis"]]$log))#
#
y <- rnorm(spec[["Onetheria biennis"]]$log)#
qqnorm(y); qqline(y)#
# Onetheria biennis: test for height measurements #
#
m1 <- lm(log ~ Height,#
       data = spec[["Onetheria biennis"]])#
summary(m1)#
#
# R-squared value is 0.8165 and p-value is 0.0005163, which means that the model does explain the variation of the data (fits the regression model) and it is also significant. This morphological characteristic might be a good biomass indicator for Onetheria biennis since it has the highest R-squared value.#
# ggplot to plot it#
#
ggplot(data=subset(dat,Species=="Onetheria biennis"), aes(x=Height, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Height (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Height vs. Biomass for", substitute(paste(italic("Onetheria biennis"))))#
# plot to .png file#
#
O.biennis <-  ggplot(data=subset(dat,Species=="Onetheria biennis"), aes(x=Height, y=Biomass), na.rm=TRUE) + geom_point() +#
 stat_smooth(method = "lm", formula = y ~ x,#
              geom = "smooth", se = FALSE) +#
xlab("Height (cm)") + #
  ylab("Biomass (g)") +#
  ggtitle("Height vs. Biomass for", substitute(paste(italic("Onetheria biennis"))))#
ggsave(filename = addpath("o.biennis_height.png", results_path), o.biennis)
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
Rows <- which(grepl("Festuca Mairei"Unplanted weed" "Unidentified shrub", d1$Species))
Rows <- which(grepl("Festuca Mairei" "Unplanted weed" "Unidentified shrub", d1$Species))
Rows <- which(grepl("Festuca Mairei", "Unplanted weed", "Unidentified shrub", d1$Species))
d1 <- d1[-c(Rows),]#
d1
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
spec
rows
Rows
head(Rows)
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
Rows <- which(grepl(c("Festuca Mairei","Unplanted weed", "Unidentified shrub"), d1$Species))#
d1 <- d1[-c(Rows),]#
d1
Rows <- which(grepl("Festuca Mairei", d1$Species))#
 + which(grepl("Unplanted weed", d1$Species))#
 + which(grepl("Unidentified shrub", d1$Species))
Rows <- which(grepl("Festuca Mairei", d1$Species)) + which(grepl("Unplanted weed", d1$Species)) + which(grepl("Unidentified shrub", d1$Species))
d1 <- d1[-c(Rows),]#
d1
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows <- which(grepl("Festuca Mairei", d1$Species)) + which(grepl("Unplanted weed", d1$Species)) + which(grepl("Unidentified shrub", d1$Species))#
d1 <- d1[-c(Rows),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
Rows1 <- which(grepl("Festuca Mairei", d1$Species)) #
Rows2 <- which(grepl("Unplanted weed", d1$Species)) #
Rows3 <- which(grepl("Unidentified shrub", d1$Species)) #
#
d1 <- d1[-c(Rows1, Rows2, Rows3),]#
d1
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
#
Rows1 <- which(grepl("Festuca Mairei", d1$Species)) #
Rows2 <- which(grepl("Unplanted weed", d1$Species)) #
Rows3 <- which(grepl("Unidentified shrub", d1$Species)) #
#
d1 <- d1[-c(Rows1, Rows2, Rows3),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
Unplanted weed and Unidentified shrub
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
# We are also going to eliminate Unplanted weed and Unidentified shrub due to lack of identification on these species. #
#
Rows1 <- which(grepl("Festuca Mairei", d1$Species)) #
Rows2 <- which(grepl("Unplanted weed", d1$Species)) #
Rows3 <- which(grepl("Unidentified shrub", d1$Species)) #
#
d1 <- d1[-c(Rows1, Rows2, Rows3),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei, Unplanted weed and Unidentified shrub). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
source("processingcode")
source("processingcode.R")
y
yes
source("/Users/sunyoungpark/Documents/git/Sunyoung-Park-Rclass-project3/Code/Processing_code/processingcode.R")
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
# We are also going to eliminate Unplanted weed and Unidentified shrub due to lack of identification on these species. #
#
Rows1 <- which(grepl("Festuca Mairei", d1$Species)) #
Rows2 <- which(grepl("Unplanted weed", d1$Species)) #
Rows3 <- which(grepl("Unidentified shrub", d1$Species)) #
#
d1 <- d1[-c(Rows1, Rows2, Rows3),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei, Unplanted weed and Unidentified shrub). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
################################
# processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
# Setup#
#
# This code is needed to pull the code chunks contained in `processingcode.R` into active memory:#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(dplyr) #for data processing/cleaning#
require(tidyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
## ---- loaddata1.1 --------#
data_location <- "../../Data/Raw_data/plant_measurement_raw.csv"#
data_path <- "../../Data/Raw_data/"#
#
## ---- loaddata1.2 --------#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- loaddata1.3 --------#
#
# We can look in the data dictionary for a variable explanation. I am using the paste function here to add the path to the filename.#
#
# sep=“” adds no space when pasting.#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
## ---- exploredata --------#
#
# Different ways to look at the data#
#
dplyr::glimpse(rawdata)#
#
summary(rawdata)#
#
head(rawdata)#
#
skimr::skim(rawdata)#
## ---- exploredata2 --------#
#
# We temporarily change the variable names to short names in this script for convenience. #
#
longnames <- names(rawdata)#
names(rawdata) <- c("Date", "Time", "Sample number", "Location", "Type", "Treatment", "Size", "Species", "Plant type", "Height", "Width_farthest", "Width_perpendicular", "Branch_length", "Branch_diameter", "Basal_circ", "Stem_diameter", "Stem_height", "Stem_density", "Branches_per_stem", "Leaves_per_branch", "Total_leaves", "Leaf_lmax", "Leaf_lmin", "Leaf_lavg", "Leaf_wmax", "Leaf_wmin", "Leaf_wavg", "Leaf_tmax", "Leaf_tmin", "Leaf_tavg", "Biomass", "Measurement_location", "Note", "leaf: branch (total; biomass)", "leaf: branch (single branch; biomass)")#
## ---- cleandata1 --------#
#
# We check to make sure there is 14 species of plants for the dataset.#
#
unique(rawdata$Species)#
#
# Letʻs save rawdata as d1, and modify d1 so we can compare versions. #
#
d1 <- rawdata#
unique(d1$Species)#
## ---- cleandata2 -------- #
#
# Get rid of date and time, notes, 'Leaf: branch (total; biomass)' and 'Leaf: branch (single; biomass)' from the column#
# We don't need these for our analysis.#
d1 <- d1[,3:32]#
# Some morphological measurements are missing for some species. It is because those measurements are irrelevant to certain species depending on the types of plant species (forbs, trees, and shrub) they are. #
#Turn any blanks or n/a's into NA#
#
d1[d1==""] <- NA#
d1[d1=="n/a"] <- NA#
# Coerce all the entries of the morphological measurement variables to numeric#
num <- c(8:29)#
d1[,num] <- apply(d1[,num], 2, function(x) as.numeric(as.character(x)))#
skimr::skim(d1)#
## ---- cleandata3 -------- #
#
# We turn species into a categorical variable.#
#
d1$Species <- as.character(d1$Species)#
#
# We want to separate the measurements by species so we can look at morph measurements that correlate with the biomass of each species separately. #
#
# We split the plant (d1) dataframe into a list of dataframes (aka spec) by species. #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- cleandata4 -------- #
#
# Look at each species and their morph measurements#
# Since Festuca Mairei only has three samples, we are going to eliminate it from the sample species, due to not enough sample size.#
# We are also going to eliminate Unplanted weed and Unidentified shrub due to lack of identification on these species. #
#
Rows1 <- which(grepl("Festuca Mairei", d1$Species)) #
Rows2 <- which(grepl("Unplanted weed", d1$Species)) #
Rows3 <- which(grepl("Unidentified shrub", d1$Species)) #
#
d1 <- d1[-c(Rows1, Rows2, Rows3),]#
d1#
# Redefine spec with a new list of species (excluding Festuca Mairei, Unplanted weed and Unidentified shrub). #
spec <- with(d1, split(d1, list(Species = Species)))#
spec <- lapply(spec, function(x) x[, colSums(is.na(x)) == 0])#
#
spec#
## ---- savedata --------#
#
# Save the clean data as processed data#
# We save d1, which is a dataframe as the clean data and will convert to spec, which is a list, on analysis script for data analysis.#
#
processeddata <- d1      # clean data#
## ---- savedata2 --------#
#
# Location to save file#
#
# We save the clean data as RDS file, as well as a copy as .csv.#
# RDS/Rdata preserves coding like factors, characters, numeric, etc.#
#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)
